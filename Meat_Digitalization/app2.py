# app_merged.py ‚Äî –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ –≤–∞—à–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.
# –î–∏–∑–∞–π–Ω, –ì–ª–∞–≤–Ω–∞—è, –ü—Ä–æ—Ü–µ—Å—Å, –†–µ–≥—Ä–µ—Å—Å–∏–∏ ‚Äî –∏–∑ app1.py
# pH, –≠–∫—Å—Ç—Ä–∞–∫—Ç, –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, ML, –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö ‚Äî –∏–∑ app.py

import streamlit as st
import pandas as pd
import numpy as np
from pathlib import Path
import matplotlib.pyplot as plt
import io
import json
import sqlite3
from datetime import datetime
import plotly.express as px
import plotly.graph_objects as go  # –í–∑—è—Ç–æ –∏–∑ app1.py
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
import joblib
import base64
import time
import os

# ---------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫ (–∏–∑ app1.py)
# ---------------------------
# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
MEAT_XLSX = "meat_data.xlsx"
SHEET_NAME = "T6"
BASE_DIR = Path(__file__).parent
DATA_DIR = BASE_DIR / "data"
DATA_DIR.mkdir(exist_ok=True)
DB_FILE = DATA_DIR / "measurements.db"
MODEL_FILE = DATA_DIR / "model.pkl"
SCALER_FILE = DATA_DIR / "scaler.pkl"

# –ï—Å–ª–∏ —Ñ–∞–π–ª—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, —Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∫–æ–¥–∞
MEAT_DATA_XLSX = BASE_DIR / "meat_data.xlsx"
OPYTY_XLSX = BASE_DIR / "opyty.xlsx"
PRODUCTS_CSV = BASE_DIR / "Products.csv"
SAMPLES_CSV = BASE_DIR / "Samples.csv"
MEASUREMENTS_CSV = BASE_DIR / "Measurements.csv"

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç (–∏–∑ app1.py)
if not OPYTY_XLSX.exists():
    temp_df = pd.DataFrame({
        'Time_h': [0, 1, 2, 4, 8, 12, 24, 48, 72, 96, 120, 144],
        'pH_Control': [6.5, 6.4, 6.3, 6.1, 5.8, 5.5, 5.2, 5.1, 5.1, 5.15, 5.2, 5.2],
        'pH_Extract': [6.5, 6.45, 6.35, 6.2, 5.9, 5.6, 5.4, 5.3, 5.3, 5.35, 5.4, 5.4],
        'Salt_pct': [2.5] * 12,
        'Temp_C': [18] * 12
    })
    temp_df.to_excel(OPYTY_XLSX, index=False)

if not MEAT_DATA_XLSX.exists():
    temp_df_meat = pd.DataFrame({
        "BatchID": ["B001", "B002", "B003"],
        "mass_kg": [10.5, 12.0, 9.8],
        "T_initial_C": [2, 3, 2],
        "Salt_pct": [3.0, 3.5, 3.2],
        "Moisture_pct": [72, 70, 71],
        "StarterCFU": [1e6, 2e6, 1.5e6],
        "Extract_pct": [0.0, 3.0, 5.0]
    })
    with pd.ExcelWriter(MEAT_DATA_XLSX, engine='openpyxl') as writer:
        temp_df_meat.to_excel(writer, sheet_name=SHEET_NAME, index=False)

# ---------------------------
# –£—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∏–∑ app1.py)
# ---------------------------
st.set_page_config(page_title="–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ñ–∞—è ‚Äî —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è", layout="wide")

# =================================================================
# üé® ENHANCED DESIGN AND ANIMATION - DARK THEME (–ò–ó app1.py)
# =================================================================
st.markdown("""
<style>
/* 1. Global & Page Config */
.stApp {
    background-color: #111111; /* DARK/Black background */
    color: #f0f0f0; /* Light text for general readability */
}
/* ... (–≤–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π CSS –∫–æ–¥ –∏–∑ app1.py) ... */
/* Ensure all text within containers is readable */
.st-emotion-cache-1n76c1k, [data-testid="stSidebar"] div, div[data-testid="stForm"] > div > label > div {
    color: #f0f0f0 !important;
}
h1, h2, h3, h4, h5, h6, .stMarkdown, .stText {
    color: #f0f0f0 !important;
}
/* 2. Fade-In Animation */
.fade-in {
  animation: fadeIn ease 0.5s;
}
@keyframes fadeIn {
  0% {opacity:0; transform:translateY(6px)}
  100% {opacity:1; transform:translateY(0)}
}
.small-muted {color: #a0a0a0; font-size:0.9em;}
/* 3. Title Animation */
.main-title-animation {
    animation: pulseTitle 1.5s infinite alternate;
    color: #4dc4ff; /* Accent Blue */
    text-shadow: 1px 1px 4px rgba(0,0,0,0.4);
}
@keyframes pulseTitle {
    0% { transform: scale(1.0); opacity: 0.95; }
    100% { transform: scale(1.005); opacity: 1.0; }
}
/* 4. Customizing Sidebar */
[data-testid="stSidebar"] {
    background-color: #1f1f1f;
    box-shadow: 2px 0px 8px rgba(0,0,0,0.5);
}
/* 5. Metric Cards Styling */
[data-testid="stVerticalBlock"] > [style*="flex-direction: column"] > [data-testid="stMetric"] {
    background-color: #2a2a2a;
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 15px;
    border-left: 5px solid #0d6efd;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
    transition: all 0.3s;
}
[data-testid="stVerticalBlock"] > [style*="flex-direction: column"] > [data-testid="stMetric"]:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 15px rgba(0, 0, 0, 0.6);
}
.stMetric .st-bd {
    font-size: 2em !important;
    font-weight: 700 !important;
    color: #0d6efd; /* Accent Blue */
}
/* --- NEW CARD STYLE for Key Findings --- */
.key-finding-card {
    background-color: #2a2a2a;
    border-radius: 12px;
    padding: 20px;
    margin-bottom: 20px;
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.4);
    transition: transform 0.3s ease;
    border: 1px solid #333;
}
.key-finding-card:hover {
    transform: scale(1.02);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.6);
}
.key-finding-card h4 {
    color: #4dc4ff !important;
    font-size: 1.2em;
    border-bottom: 2px solid #343a40;
    padding-bottom: 5px;
    margin-top: 0;
}
.key-value {
    font-size: 2.2em;
    font-weight: 700;
    color: #198754; /* Green for success */
}
/* 6. Step Buttons Styling */
.stButton button[key*="btn_"] {
    background-color: #495057;
    color: white;
    border-radius: 5px;
    border: none;
    transition: all 0.3s ease;
    padding: 10px 15px;
    font-weight: 600;
}
.stButton button[key*="btn_"]:hover {
    background-color: #6c757d;
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0,0,0,0.5);
}
/* Highlight active button */
.stButton button[aria-pressed="true"] {
    background-color: #198754 !important;
    border-color: #198754 !important;
    box-shadow: 0 3px 6px rgba(25, 135, 84, 0.6) !important;
}
/* 7. pH Pulse Animation */
@keyframes pulse {
    0% { box-shadow: 0 0 0 0 rgba(25, 135, 84, 0.7); }
    70% { box-shadow: 0 0 0 10px rgba(25, 135, 84, 0); }
    100% { box-shadow: 0 0 0 0 rgba(25, 135, 84, 0); }
}
</style>
""", unsafe_allow_html=True)

# ---------------------------
# –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å (–∏–∑ app1.py - —Å–∞–º–∞—è –ø–æ–ª–Ω–∞—è)
# ---------------------------
LANG = {
    "ru": {
        "title": "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ñ–∞—è",
        "full_title": "–¶–∏—Ñ—Ä–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –º—è—Å–Ω–æ–≥–æ –¥–µ–ª–∏–∫–∞—Ç–µ—Å–∞ –ñ–∞—è",  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–∏—Ç—É–ª
        "version_note": "–í–µ—Ä—Å–∏—è: –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è",
        "menu": ["–ì–ª–∞–≤–Ω–∞—è", "–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –ñ–∞—è", "–†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∫–∞—á–µ—Å—Ç–≤–∞",
                 "–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ pH", "–ê–Ω–∞–ª–∏–∑ —Å —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ–º –æ–±–ª–µ–ø–∏—Ö–∏", "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", "–ò—Å—Ç–æ—Ä–∏—è / DB",
                 "ML: Train / Predict", "–í–≤–æ–¥ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"],
        "db_reset_confirm": "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è?",
        "train_button": "–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å",
        "predict_button": "–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑",
        "upload_csv": "–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV/Excel",
    },
    "en": {
        "title": "Meat Digitalization Platform",
        "full_title": "Digital Platform for the Meat Delicacy 'Zhaya'",
        "version_note": "Version: merged",
        "menu": ["Home", "Production process", "Regression quality models",
                 "pH Modeling", "Sea-buckthorn extract analysis", "Data exploration", "History / DB",
                 "ML: Train / Predict", "Input New Data"],
        "db_reset_confirm": "Are you sure you want to delete all measurements?",
        "train_button": "Train model",
        "predict_button": "Predict",
        "upload_csv": "Upload CSV/Excel",
    },
    "kk": {
        "title": "–ñ–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Å—ã",
        "full_title": "¬´–ñ–∞—è¬ª –µ—Ç –¥–µ–ª–∏–∫–∞—Ç–µ—Å—ñ–Ω–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω —Ü–∏—Ñ—Ä–ª—ã“õ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞",
        "version_note": "–ù“±—Å“õ–∞: –±—ñ—Ä—ñ–∫—Ç—ñ—Ä—ñ–ª–≥–µ–Ω",
        "menu": ["–ë–∞—Å—Ç—ã", "”®–Ω–¥—ñ—Ä—ñ—Å –ø—Ä–æ—Ü–µ—Å—ñ", "–°–∞–ø–∞ —Ä–µ–≥—Ä–µ—Å—Å–∏—è–ª—ã“õ –º–æ–¥–µ–ª—å–¥–µ—Ä—ñ",
                 "pH –º–æ–¥–µ–ª–¥–µ—É", "“ö“±–ª–ø—ã–Ω–∞–π —Å—ã“ì—ã–Ω–¥—ã—Å—ã —Ç–∞–ª–¥–∞—É—ã", "–î–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ –∑–µ—Ä—Ç—Ç–µ—É", "–¢–∞—Ä–∏—Ö / DB",
                 "ML: “Æ–π—Ä–µ—Ç—É / –ë–æ–ª–∂–∞–º", "–ñ–∞“£–∞ –¥–µ—Ä–µ–∫—Ç–µ—Ä –µ–Ω–≥—ñ–∑—É"],
        "db_reset_confirm": "–ë–∞—Ä–ª—ã“õ ”©–ª—à–µ–º–¥–µ—Ä–¥—ñ –∂–æ–π“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω–µ —Å–µ–Ω—ñ–º–¥—ñ—Å—ñ–∑ –±–µ?",
        "train_button": "–ú–æ–¥–µ–ª—å–¥—ñ “Ø–π—Ä–µ—Ç—É",
        "predict_button": "–ë–æ–ª–∂–∞–º –∂–∞—Å–∞—É",
        "upload_csv": "CSV/Excel –∂“Ø–∫—Ç–µ—É",
    }
}

lang_choice = st.sidebar.selectbox("–Ø–∑—ã–∫ / –¢—ñ–ª / Language", options=["ru", "en", "kk"], index=0)
L = LANG[lang_choice]


# ---------------------------
# –§—É–Ω–∫—Ü–∏–∏ Excel (–ò–ó app.py - –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Page 8)
# ---------------------------
def safe_read_excel(path, sheet_name):
    if os.path.exists(path):
        try:
            df = pd.read_excel(path, sheet_name=sheet_name)
        except ValueError:
            # –ï—Å–ª–∏ –ª–∏—Å—Ç–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
            st.warning(f"‚ö†Ô∏è –õ–∏—Å—Ç '{sheet_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤—ã–π.")
            df = pd.DataFrame(
                columns=["BatchID", "mass_kg", "T_initial_C", "Salt_pct", "Moisture_pct", "StarterCFU", "Extract_pct"])
            with pd.ExcelWriter(path, engine='openpyxl', mode='a', if_sheet_exists='replace') as writer:
                df.to_excel(writer, index=False, sheet_name=sheet_name)
        return df
    else:
        st.warning(f"‚ö†Ô∏è –§–∞–π–ª {path} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤—ã–π.")
        df = pd.DataFrame(
            columns=["BatchID", "mass_kg", "T_initial_C", "Salt_pct", "Moisture_pct", "StarterCFU", "Extract_pct"])
        df.to_excel(path, index=False, sheet_name=sheet_name)
        return df


# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ ---
def append_row_excel(path, sheet_name, new_row):
    df = safe_read_excel(path, sheet_name)
    df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
    with pd.ExcelWriter(path, engine='openpyxl', mode='a', if_sheet_exists='replace') as writer:
        df.to_excel(writer, index=False, sheet_name=sheet_name)


# ---------------------------
# DB Utility (–∏–∑ app1.py - –∏–¥–µ–Ω—Ç–∏—á–Ω–∞ app.py)
# ---------------------------
def get_conn():
    conn = sqlite3.connect(DB_FILE, check_same_thread=False)
    return conn


def init_db():
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS measurements (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            sample_name TEXT,
            ph REAL,
            score REAL,
            notes TEXT,
            created_at TEXT
        )
    """)
    conn.commit()
    conn.close()


def insert_measurement(sample_name, ph=None, score=None, notes=None):
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("INSERT INTO measurements (sample_name, ph, score, notes, created_at) VALUES (?,?,?,?,?)",
                (sample_name, ph, score, notes, datetime.utcnow().isoformat()))
    conn.commit()
    conn.close()


def fetch_measurements(limit=5000):
    conn = get_conn()
    df = pd.read_sql_query("SELECT * FROM measurements ORDER BY created_at DESC LIMIT ?", conn, params=(limit,))
    conn.close()
    if not df.empty:
        df['created_at'] = pd.to_datetime(df['created_at'])
    return df


def delete_all_measurements():
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("DELETE FROM measurements")
    conn.commit()
    conn.close()


init_db()


# ---------------------------
# ML: (–ò–ó app.py - –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Page 7)
# ---------------------------
class SimplePHModel:
    def __init__(self):
        self.model = None
        self.scaler = None
        # try load
        if MODEL_FILE.exists() and SCALER_FILE.exists():
            try:
                self.model = joblib.load(MODEL_FILE)
                self.scaler = joblib.load(SCALER_FILE)
            except Exception:
                self.model, self.scaler = None, None

    def train(self, df, target='pH', feature_cols=None, test_size=0.2):
        df = df.copy()
        if target not in df.columns:
            raise ValueError("Target column not found")
        df = df.dropna(subset=[target])
        if feature_cols is None or len(feature_cols) == 0:
            feature_cols = df.select_dtypes(include=[np.number]).columns.tolist()
            feature_cols = [c for c in feature_cols if c != target]
        # fallback single constant feature if none
        if len(feature_cols) == 0:
            df['_ones'] = 1.0
            feature_cols = ['_ones']
        X = df[feature_cols].astype(float).values
        y = df[target].astype(float).values
        # scale
        self.scaler = StandardScaler()
        Xs = self.scaler.fit_transform(X)
        # train
        self.model = LinearRegression()
        self.model.fit(Xs, y)
        # save
        joblib.dump(self.model, MODEL_FILE)
        joblib.dump(self.scaler, SCALER_FILE)
        # estimate metrics on training set (no holdout for simplicity)
        preds = self.model.predict(Xs)
        rmse = float(np.sqrt(np.mean((preds - y) ** 2)))
        # r2:
        ss_res = np.sum((y - preds) ** 2)
        ss_tot = np.sum((y - np.mean(y)) ** 2) if len(y) > 1 else 0.0
        r2 = float(1 - ss_res / ss_tot) if ss_tot > 0 else 0.0
        return {"rmse": rmse, "r2": r2, "n": int(len(y)), "features": feature_cols}

    def predict(self, df, feature_cols=None):
        if self.model is None or self.scaler is None:
            # fallback
            n = len(df) if df is not None else 1
            return np.array([6.5] * n)
        if feature_cols is None or len(feature_cols) == 0:
            feature_cols = df.select_dtypes(include=[np.number]).columns.tolist()
        if len(feature_cols) == 0:
            X = np.ones((len(df), 1))
        else:
            X = df[feature_cols].astype(float).values
        Xs = self.scaler.transform(X)
        preds = self.model.predict(Xs)
        preds = np.clip(preds, 0.0, 14.0)  # realistic pH clamp
        return preds


ph_model = SimplePHModel()


# ---------------------------
# Utilities
# ---------------------------
# (safe_read_csv –∏–∑ app1.py)
def safe_read_csv(path: Path):
    if not path.exists():
        return pd.DataFrame()
    encodings = ['utf-8-sig', 'utf-8', 'windows-1251', 'latin1']
    for enc in encodings:
        try:
            return pd.read_csv(path, encoding=enc)
        except UnicodeDecodeError:
            continue
        except pd.errors.ParserError:
            try:
                return pd.read_csv(path, encoding=enc, engine='python')
            except Exception:
                continue
        except Exception:
            continue
    return pd.DataFrame()


# (compute_score_from_ph –ò–ó app.py - –¥–ª—è Page 7)
def compute_score_from_ph(ph_value):
    if ph_value is None or (isinstance(ph_value, float) and np.isnan(ph_value)):
        return None
    return round(max(0.0, 10.0 - abs(ph_value - 6.5)), 2)


# (df_to_download_link –∏–∑ app1.py - –∏–¥–µ–Ω—Ç–∏—á–Ω–∞)
def df_to_download_link(df, filename="export.csv"):
    csv = df.to_csv(index=False)
    b64 = base64.b64encode(csv.encode()).decode()
    return f'<a href="data:file/csv;base64,{b64}" download="{filename}">–°–∫–∞—á–∞—Ç—å {filename}</a>'


# ---------------------------
# Load original data (–∏–∑ app1.py - —Å–∞–º–∞—è –ø–æ–ª–Ω–∞—è)
# ---------------------------
@st.cache_data
def load_all_data():
    data_sheets = {}
    try:
        if MEAT_DATA_XLSX.exists():
            xls = pd.ExcelFile(MEAT_DATA_XLSX)
            for sheet_name in xls.sheet_names:
                data_sheets[sheet_name] = pd.read_excel(xls, sheet_name=sheet_name, engine='openpyxl')
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å '{MEAT_DATA_XLSX.name}': {e}")

    df_ph = None
    if OPYTY_XLSX.exists():
        try:
            df_ph = pd.read_excel(OPYTY_XLSX, engine='openpyxl')
        except Exception as e:
            st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å '{OPYTY_XLSX.name}': {e}")

    # Fake data if original files are missing
    if df_ph is None or df_ph.empty:
        df_ph = pd.DataFrame({
            'Time_h': [0, 1, 2, 4, 8, 12, 24, 48, 72, 96, 120, 144],
            'pH_Control': [6.5, 6.4, 6.3, 6.1, 5.8, 5.5, 5.2, 5.1, 5.1, 5.15, 5.2, 5.2],
            'pH_Extract': [6.5, 6.45, 6.35, 6.2, 5.9, 5.6, 5.4, 5.3, 5.3, 5.35, 5.4, 5.4],
            'Salt_pct': [2.5] * 12,
            'Temp_C': [18] * 12
        })

    products_df = safe_read_csv(PRODUCTS_CSV)
    samples_df = safe_read_csv(SAMPLES_CSV)
    measurements_df = safe_read_csv(MEASUREMENTS_CSV)

    return data_sheets, df_ph, products_df, samples_df, measurements_df


all_meat_data, df_ph_raw, products, samples, measurements = load_all_data()

# Clean PH data for stability
if df_ph_raw is not None and not df_ph_raw.empty:
    df_ph_raw = df_ph_raw.rename(columns={
        df_ph_raw.columns[0]: 'Time_h',
        df_ph_raw.columns[1]: 'pH_Control',
        df_ph_raw.columns[2]: 'pH_Extract',
    }).iloc[:12]  # –í–æ–∑—å–º–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 12 —Å—Ç—Ä–æ–∫ –¥–ª—è PH –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è


# ---------------------------
# Original math functions (–∏–∑ app1.py - –¥–ª—è Page 2)
# ---------------------------
def calculate_stability(pressure, viscosity):
    p, v = pressure, viscosity
    # –§–æ—Ä–º—É–ª–∞ –¥–ª—è –ø—Ä–æ—á–Ω–æ—Å—Ç–∏/—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∫–∞—á–µ—Å—Ç–≤–∞)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Ñ–æ—Ä–º—É–ª—É, –±–ª–∏–∑–∫—É—é –∫ –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–π, –∫–∞–∫ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ.
    return 27.9 - 0.1 * p - 1.94 * v - 0.75 * p * v - 0.67 * p ** 2 - 2.5 * v ** 2


def get_ph_model(time_h, ph_obs):
    valid = ~np.isnan(time_h) & ~np.isnan(ph_obs)
    t, y = time_h[valid], ph_obs[valid]
    if len(t) < 3:
        return None, None, None, None
    try:
        coeffs = np.polyfit(t, y, 2)  # –ö–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è
        model_function = np.poly1d(coeffs)
        y_hat = model_function(t)
        r2 = 1 - (np.sum((y - y_hat) ** 2) / np.sum((y - np.mean(y)) ** 2))
        rmse = np.sqrt(np.mean((y - y_hat) ** 2))
        return model_function, y_hat, rmse, r2
    except np.linalg.LinAlgError:
        return None, None, None, None


# ---------------------------
# UI: Main navigation (–∏–∑ app1.py)
# ---------------------------
st.sidebar.markdown("<div class='fade-in'>", unsafe_allow_html=True)
st.sidebar.title(L["title"])
st.sidebar.caption(L["version_note"])

page_options = L["menu"]
page = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª / Section", page_options, index=0)
st.sidebar.markdown("</div>", unsafe_allow_html=True)

# Session state initialization
if 'selected_product_id' not in st.session_state: st.session_state.selected_product_id = None
if 'selected_step' not in st.session_state: st.session_state.selected_step = None
if 'active_stage_clean' not in st.session_state: st.session_state['active_stage_clean'] = 'priemka'

# =================================================================
# PAGE: –ì–ª–∞–≤–Ω–∞—è (–ë–∞—Å—Ç—ã) (–ò–ó app1.py)
# =================================================================
if page == L["menu"][0]:
    # ... (–ö–æ–¥ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –æ—Ç–≤–µ—Ç–µ - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    st.markdown("<div class='fade-in'>", unsafe_allow_html=True)
    st.markdown(f'<h1 class="main-title-animation">{L["full_title"]}</h1>', unsafe_allow_html=True)
    st.subheader("–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞")

    st.markdown("---")

    # 2. –ö–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–ú–µ—Ç—Ä–∏–∫–∏)
    st.markdown("### –ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã")
    col_a, col_b, col_c = st.columns(3)

    with col_a:
        st.metric(label="‚öôÔ∏è –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã", value="4 –®–∞–≥–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è", delta="–û—Ç —Å—ã—Ä—å—è –¥–æ —É–ø–∞–∫–æ–≤–∫–∏")
        st.write("–ü–æ—à–∞–≥–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.")

    with col_b:
        st.metric(label="üìà –ü—Ä–æ–≥–Ω–æ–∑ –ö–∞—á–µ—Å—Ç–≤–∞ (ML)", value="pH –∏ –í–ª–∞–∂–Ω–æ—Å—Ç—å", delta="–ù–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞—Å–æ–ª–∞/—Å—É—à–∫–∏")
        st.write("–†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.")

    with col_c:
        st.metric(label="üî¨ –ê–Ω–∞–ª–∏–∑ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", value="–≠–∫—Å—Ç—Ä–∞–∫—Ç –û–±–ª–µ–ø–∏—Ö–∏",
                  delta="–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏/—Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏")
        st.write("–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤–ª–∏—è–Ω–∏—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç–æ–≤.")

    st.markdown("---")

    # 3. –î–û–ü–û–õ–ù–ï–ù–ò–Ø –ò–ó –û–¢–ß–ï–¢–ê (–ö–ª—é—á–µ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è)
    st.markdown("### üèÜ –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—É—á–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–ò–∑ –æ—Ç—á–µ—Ç–∞)")
    col1, col2, col3 = st.columns(3)

    with col1:
        st.markdown(f"""
        <div class="key-finding-card">
            <h4>–í–ª–∞–≥–æ—É–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å (–í–£–°)</h4>
            <div class="small-muted">–†–æ—Å—Ç –í–£–° –ø—Ä–∏ 5% —ç–∫—Å—Ç—Ä–∞–∫—Ç–∞</div>
            <div class="key-value">75.6%</div>
            <div class="small-muted">–ü—Ä–æ—Ç–∏–≤ 60.2% –≤ –∫–æ–Ω—Ç—Ä–æ–ª–µ.</div>
        </div>
        """, unsafe_allow_html=True)

    with col2:
        # –ò–∑ –û—Ç—á–µ—Ç_–ø–æ_–º—è—Å–æ.docx: "–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 3‚Äì5%, –ø—Ä–∏ —ç—Ç–æ–º –¥–ª—è —Ü–µ–ª—å–Ω–æ–º—ã—à–µ—á–Ω–æ–π –∫–æ–ø—á—ë–Ω–æ–π –∂–∞—è –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ 5%, –∞ –¥–ª—è —Ñ–æ—Ä–º–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–¥–µ–ª–∏—è ‚Äì 3%. –í —ç—Ç–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —É–ª—É—á—à–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Å–≤–æ–π—Å—Ç–≤"
        st.markdown(f"""
        <div class="key-finding-card">
            <h4>–°—Ä–æ–∫ –ì–æ–¥–Ω–æ—Å—Ç–∏ (–ü—Ä–æ–≥–Ω–æ–∑)</h4>
            <div class="small-muted">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏ 0-5¬∞–°</div>
            <div class="key-value">60 —Å—É—Ç–æ–∫</div>
            <div class="small-muted">–ù–∞ 30 –¥–Ω–µ–π –¥–æ–ª—å—à–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ (30 —Å—É—Ç–æ–∫).</div>
        </div>
        """, unsafe_allow_html=True)

    with col3:
        st.markdown(f"""
        <div class="key-finding-card">
            <h4>–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è</h4>
            <div class="small-muted">–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è –¥–æ–∑–∏—Ä–æ–≤–∫–∞ —ç–∫—Å—Ç—Ä–∞–∫—Ç–∞</div>
            <div class="key-value">3 - 5%</div>
            <div class="small-muted">–ë–∞–ª–∞–Ω—Å –≤–∫—É—Å–∞ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏.</div>
        </div>
        """, unsafe_allow_html=True)

    st.markdown("---")

    # 4. –î–∏–Ω–∞–º–∏–∫–∞–ª—ã“õ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
    st.subheader("üß™ –û–∫–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: –°–Ω–∏–∂–µ–Ω–∏–µ –ü–µ—Ä–µ–∫–∏—Å–Ω–æ–≥–æ –ß–∏—Å–ª–∞ (–¢–ë–ß)")
    TBC_control = 2.80
    TBC_extract = 0.90
    reduction_pct = round((1 - (TBC_extract / TBC_control)) * 100)

    st.markdown(f"**–¶–µ–ª—å:** –°–Ω–∏–∑–∏—Ç—å –æ–∫–∏—Å–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ 30 –¥–Ω–µ–π —Ö—Ä–∞–Ω–µ–Ω–∏—è.")
    st.progress(reduction_pct / 100,
                text=f"**{reduction_pct}% –°–Ω–∏–∂–µ–Ω–∏–µ –¢–ë–ß** (–û–∫–∏—Å–ª–µ–Ω–∏—è) –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ 5% —ç–∫—Å—Ç—Ä–∞–∫—Ç–∞.")
    st.caption(f"–°–Ω–∏–∂–µ–Ω–∏–µ –¢–ë–ß —Å {TBC_control} –º–≥/–∫–≥ (–ö–æ–Ω—Ç—Ä–æ–ª—å) –¥–æ {TBC_extract} –º–≥/–∫–≥ (5% –≠–∫—Å—Ç—Ä–∞–∫—Ç) –ø–æ—Å–ª–µ 30 –¥–Ω–µ–π.")
    st.success("–í—ã—Å–æ–∫–∞—è –∞–Ω—Ç–∏–æ–∫–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞.")

    st.markdown("---")

    # 5. –ê–Ω–∏–º–∞—Ü–∏—è–ª–∞–Ω“ì–∞–Ω "–ú–∞“õ—Å–∞—Ç—Ç—ã pH" –∫–∞—Ä—Ç–∞—Å—ã
    st.subheader("üéØ –ö–æ–Ω—Ç—Ä–æ–ª—å pH: –¶–µ–ª–µ–≤–æ–π –î–∏–∞–ø–∞–∑–æ–Ω")
    current_ph = 5.35
    ph_min = 5.1
    ph_max = 5.6

    st.markdown(f"""
        <div style='text-align:center; padding: 20px; background-color: #2a2a2a; border-radius: 10px; border: 2px solid #333;'>
            <h4 style='color:#f0f0f0;'>–¢–µ–∫—É—â–∏–π/–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π pH: </h4>
            <h1 style='color:#198754; font-size: 3em; animation: pulse 1s infinite;'>{current_ph:.2f}</h1>
            <div class="small-muted">–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞: <b>{ph_min:.1f} ‚Äì {ph_max:.1f}</b></div>
        </div>
        """, unsafe_allow_html=True)

    if ph_min <= current_ph <= ph_max:
        st.success("‚úÖ **–°—Ç–∞—Ç—É—Å:** pH –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ. –ë–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∏–¥–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        st.warning("‚ö†Ô∏è **–°—Ç–∞—Ç—É—Å:** pH –≤–Ω–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ–ª–µ–Ω–∏—è.")

    st.markdown("</div>", unsafe_allow_html=True)

# =================================================================
# PAGE: –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –ñ–∞—è (”®–Ω–¥—ñ—Ä—ñ—Å –ø—Ä–æ—Ü–µ—Å—ñ) (–ò–ó app1.py)
# =================================================================
elif page == L["menu"][1]:
    st.markdown("<div class='fade-in'>", unsafe_allow_html=True)
    st.title(" –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –ñ–∞—è")
    st.markdown("### –ü–æ—à–∞–≥–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ (—Å —É—á–µ—Ç–æ–º –≠–∫—Å—Ç—Ä–∞–∫—Ç–∞ –∏ IoT)")

    # –ö–Ω–æ–ø–∫–∏ —Å –Ω–æ–≤—ã–º —Å—Ç–∏–ª–µ–º/–∞–∫—Ç–∏–≤–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º (CSS 6 –∏ 7)
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        if st.button("1. –ü—Ä–∏–µ–º–∫–∞ —Å—ã—Ä—å—è ü•©", key='btn_priemka'):
            st.session_state['active_stage_clean'] = 'priemka'
    with col2:
        if st.button("2. –ü–æ—Å–æ–ª (–≠–∫—Å—Ç—Ä–∞–∫—Ç) üßÇ", key='btn_posol'):  # –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ
            st.session_state['active_stage_clean'] = 'posol'
    with col3:
        if st.button("3. –¢–µ—Ä–º–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ üî•", key='btn_termo'):
            st.session_state['active_stage_clean'] = 'termokamera'
    with col4:
        if st.button("4. –•—Ä–∞–Ω–µ–Ω–∏–µ (–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏) üì¶", key='btn_upakovka'):  # –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ
            st.session_state['active_stage_clean'] = 'upakovka'

    st.markdown("---")
    active_stage = st.session_state.get('active_stage_clean')

    if active_stage == 'priemka':
        st.header("1. –ü—Ä–∏–µ–º–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—ã—Ä—å—è")
        with st.expander("–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏–µ–º–∫–∏", expanded=True):
            col_p1, col_p2, col_p3 = st.columns(3)
            col_p1.metric(label="–ù–∞—á–∞–ª—å–Ω–∞—è –º–∞—Å—Å–∞", value="1 –∫–≥")
            col_p2.metric(label="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å—ã—Ä—å—è", value="0-3¬∞–°", help="–ö–æ–Ω—Ç—Ä–æ–ª—å —Å –ø–æ–º–æ—â—å—é IoT-–¥–∞—Ç—á–∏–∫–æ–≤ –≤ –∫–∞–º–µ—Ä–µ.")
            col_p3.metric(label="–ù–∞—á–∞–ª—å–Ω—ã–π pH", value="6.5-6.8", help="–í–∞–∂–Ω–æ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å–æ–∑—Ä–µ–≤–∞–Ω–∏—è.")
            st.markdown("#### –ö–ª—é—á–µ–≤—ã–µ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
            col_kpi_a, col_kpi_b, col_kpi_c = st.columns(3)
            col_kpi_a.metric(label="–í—ã—Ö–æ–¥ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ (–¶–µ–ª—å)", value="85%", delta="–ü–æ –ì–û–°–¢")
            col_kpi_b.metric(label="–¶–µ–ª–µ–≤–∞—è $t^{\circ}$ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏", value="74¬∞–°", delta="–í–Ω—É—Ç—Ä–∏ –ø—Ä–æ–¥—É–∫—Ç–∞")
            col_kpi_c.metric(label="–ú–∞—Å—Å–∞ —Ä–∞—Å—Å–æ–ª–∞ (–ü–æ—Ç–µ—Ä—è)", value="100 –≥", delta_color="off")
            st.markdown("---")
            st.info("üí° **–¶–∏—Ñ—Ä–æ–≤–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å:** –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —É—á–µ—Ç –º–∞—Å—Å—ã –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å—ã—Ä—å—è.")

    elif active_stage == 'posol':
        st.header("2. –ü–æ—Å–æ–ª, –≠–∫—Å—Ç—Ä–∞–∫—Ç –æ–±–ª–µ–ø–∏—Ö–∏ –∏ –ú–∞—Å—Å–∏—Ä–æ–≤–∞–Ω–∏–µ")
        with st.expander("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–∞—Å—Å–æ–ª–∞ –∏ —à–ø—Ä–∏—Ü–µ–≤–∞–Ω–∏–µ", expanded=True):
            st.markdown(r"""
            **–°–æ—Å—Ç–∞–≤ —Ä–∞—Å—Å–æ–ª–∞:** 4,5 –ª $\text{H}_2\text{O}$ + 250 –≥ $\text{NaCl}$ + 0,8 –º–≥ $\text{NaNO}_2$.

            #### üåø –í–Ω–µ–¥—Ä–µ–Ω–∏–µ –≠–∫—Å—Ç—Ä–∞–∫—Ç–∞ –û–±–ª–µ–ø–∏—Ö–∏ (–ö–ª—é—á–µ–≤–æ–π —à–∞–≥)
            * **–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è:** **3% - 5%** –æ—Ç –º–∞—Å—Å—ã —Ä–∞—Å—Å–æ–ª–∞. 
            * **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –î–ª—è —Ü–µ–ª—å–Ω–æ–º—ã—à–µ—á–Ω–æ–π –ñ–∞—è –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ **5%** (–¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∞–Ω—Ç–∏–æ–∫–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã).
            * **–§—É–Ω–∫—Ü–∏—è:** –≠–∫—Å—Ç—Ä–∞–∫—Ç —É–ª—É—á—à–∞–µ—Ç –≤–ª–∞–≥–æ—É–¥–µ—Ä–∂–∏–≤–∞—é—â—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏ –¥–µ–π—Å—Ç–≤—É–µ—Ç –∫–∞–∫ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç.

            * **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ä–∞—Å—Å–æ–ª–∞:** **$16^{\circ}–°$**
            * **–£–∫–ª–∞–¥–∫–∞ –≤ —Ä–∞—Å—Å–æ–ª:** $\tau=72$ —á–∞—Å–∞, $t=0-3^{\circ}–°$. –î–∞–≤–ª–µ–Ω–∏–µ $P=1200\text{ –≥} ‚Äì 1250\text{ –≥}$ –Ω–∞ 1000 –≥.
            """)

        with st.expander("–ö–æ–Ω—Ç—Ä–æ–ª—å –∏ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", expanded=False):
            st.markdown("""
            * **–ö–æ–Ω—Ç—Ä–æ–ª—å —Å–æ–ª–∏:** –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ **—Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Å–æ–ª–µ–º–µ—Ä–∞ (–°–æ–ª–µ–º–µ—Ä / –ê—Ä–µ–æ–º–µ—Ç—Ä)** –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ $\text{NaCl}$.
            * **–ö–æ–Ω—Ç—Ä–æ–ª—å pH:** –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∑–∞–º–µ—Ä pH –≤ —Ä–∞—Å—Å–æ–ª–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏–∫–∏ —Å–æ–∑—Ä–µ–≤–∞–Ω–∏—è (—Å–º. —Ä–∞–∑–¥–µ–ª "–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ pH").
            """)

    elif active_stage == 'termokamera':
        st.header("3. –¢–µ—Ä–º–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (IoT-–∫–æ–Ω—Ç—Ä–æ–ª—å)")
        st.info("–¢–µ—Ä–º–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç 5 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤. **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—á–∫–∞: –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è $74^{\circ}–°$.**")

        termoparameters = [
            ("–°—É—à–∫–∞", "45¬∞–°", "20 –º–∏–Ω", "–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–æ–π –≤–ª–∞–≥–∏."),
            ("–û–±–∂–∞—Ä–∫–∞", "75-85¬∞–°", "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è $\mathbf{60^{\circ}–°}$", "–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞/–∞—Ä–æ–º–∞—Ç–∞."),
            ("–í–∞—Ä–∫–∞ –ø–∞—Ä–æ–º", "–ö–∞–º–µ—Ä–∞ $\mathbf{88^{\circ}–°}$", "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è $\mathbf{74^{\circ}–°}$",
             "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ (—Å–∞–Ω–∏—Ç–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)."),
            ("–°—É—à–∫–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ–º", "–í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä", "10 –º–∏–Ω", "–°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã."),
            ("–ö–æ–ø—á–µ–Ω–∏–µ", "30-33¬∞–° (–î—ã–º)", "1,5 —á–∞—Å–∞", "–ü—Ä–∏–¥–∞–Ω–∏–µ –∞—Ä–æ–º–∞—Ç–∞ (–ö–æ–ø—Ç–∏–ª—å–Ω—è $230^{\circ}–°$).")
        ]
        df_termo = pd.DataFrame(termoparameters, columns=["–≠—Ç–∞–ø", "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ö–∞–º–µ—Ä—ã", "–í—Ä–µ–º—è/–ö—Ä–∏—Ç–µ—Ä–∏–π", "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ"])
        st.dataframe(df_termo.set_index('–≠—Ç–∞–ø'), width=800)

        st.markdown("---")
        st.markdown("""
        **üå°Ô∏è IoT-–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:**
        * **–î–∞—Ç—á–∏–∫–∏:** –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã—Ö —Ç–µ—Ä–º–æ–¥–∞—Ç—á–∏–∫–æ–≤ (IoT-–∑–æ–Ω–¥) –≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è $74^{\circ}–°$.
        * **–£–ø—Ä–∞–≤–ª—è—é—â–µ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ:** –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ/–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –∫–∞–º–µ—Ä—ã –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–Ω–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã.
        """)

    elif active_stage == 'upakovka':
        st.header("4. –£–ø–∞–∫–æ–≤–∫–∞ –∏ –°—Ä–æ–∫ –ì–æ–¥–Ω–æ—Å—Ç–∏")
        with st.expander("–û–±–≤–∞–ª–∫–∞, –£–ø–∞–∫–æ–≤–∫–∞ –∏ –•—Ä–∞–Ω–µ–Ω–∏–µ (–ö–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)", expanded=True):
            st.markdown("""
            * **–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ:** –í —Ö–æ–ª–æ–¥–∏–ª—å–Ω–æ–π –∫–∞–º–µ—Ä–µ $t=0-5^{\circ}–°$ ‚Äî $12$ —á–∞—Å–æ–≤.
            * **–£–ø–∞–∫–æ–≤–∫–∞:** –í –≤–∞–∫—É—É–º-—É–ø–∞–∫–æ–≤–æ—á–Ω–æ–º –∞–≤—Ç–æ–º–∞—Ç–µ.
            """)

        st.markdown("---")
        st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤ –≥–æ–¥–Ω–æ—Å—Ç–∏:")

        col_s1, col_s2 = st.columns(2)
        col_s1.metric(label="–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ (–°—Ç–∞–Ω–¥–∞—Ä—Ç, –±–µ–∑ —ç–∫—Å—Ç—Ä–∞–∫—Ç–∞)", value="30 —Å—É—Ç–æ–∫", delta_color="off")
        col_s2.metric(label="–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ (–° 5% —ç–∫—Å—Ç—Ä–∞–∫—Ç–∞)", value="60 —Å—É—Ç–æ–∫", delta="+30 –¥–Ω–µ–π (—É–¥–≤–æ–µ–Ω–∏–µ!)")

        st.markdown("""
        **–ö–ª—é—á–µ–≤–æ–π —Ñ–∞–∫—Ç–æ—Ä:** –≠–∫—Å—Ç—Ä–∞–∫—Ç –æ–±–ª–µ–ø–∏—Ö–∏ —Å–Ω–∏–∂–∞–µ—Ç –ø–µ—Ä–µ–∫–∏—Å–Ω–æ–µ —á–∏—Å–ª–æ (TBC), —á—Ç–æ –∑–∞–º–µ–¥–ª—è–µ—Ç –æ–∫–∏—Å–ª–µ–Ω–∏–µ –∂–∏—Ä–æ–≤ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏.
        """)
        st.info(
            "üî¨ **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–∏ —Ö—Ä–∞–Ω–µ–Ω–∏–∏:** –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–æ–¥—ã ($A_w$) **$0.88-0.90$** –∂”ô–Ω–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ **$0-5^{\circ}–°$** –¥–∏–∞–ø–∞–∑–æ–Ω—ã–Ω–¥–∞ –±–æ–ª—É—ã –∫–µ—Ä–µ–∫.")

    st.markdown("</div>", unsafe_allow_html=True)

# =================================================================
# PAGE: –†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∫–∞—á–µ—Å—Ç–≤–∞ (–°–∞–ø–∞ —Ä–µ–≥—Ä–µ—Å—Å–∏—è–ª—ã“õ –º–æ–¥–µ–ª—å–¥–µ—Ä—ñ) (–ò–ó app1.py)
# =================================================================
elif page == L["menu"][2]:
    st.markdown("<div class='fade-in'>", unsafe_allow_html=True)
    st.title("üìä –†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞")
    st.markdown("### –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    st.markdown("---")

    # 1. –í–ª–∞–∂–Ω–æ—Å—Ç—å –∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ (W) (”®–∑–≥–µ—Ä—ñ—Å—Å—ñ–∑)
    st.header("1. –í–ª–∞–∂–Ω–æ—Å—Ç—å –∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ ($W$)")
    st.latex(r"W = 65.0 + 0.12 \cdot T - 0.05 \cdot H + 0.5 \cdot E")
    col_w1, col_w2, col_w3 = st.columns(3)
    with col_w1:
        T = st.slider("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å—É—à–∫–∏ (T), ¬∞C", min_value=20, max_value=35, value=25, step=1, key="w_T")
    with col_w2:
        H = st.slider("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—É—à–∫–∏ (H), —á–∞—Å", min_value=1.0, max_value=10.0, value=5.0, step=0.5, key="w_H")
    with col_w3:
        E = st.slider("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è —ç–∫—Å—Ç—Ä–∞–∫—Ç–∞ (E), %", min_value=0.0, max_value=5.0, value=3.0, step=0.5,
                      key="w_E_model1")
    W_predicted = 65.0 + 0.12 * T - 0.05 * H + 0.5 * E
    st.metric(label="–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è –í–ª–∞–∂–Ω–æ—Å—Ç—å (W), %", value=f"{W_predicted:.2f}",
              delta=f"–†–∞–∑–Ω–∏—Ü–∞ –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (65%): {W_predicted - 65.0:.2f} –ø.–ø.")
    st.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–∫—Å—Ç—Ä–∞–∫—Ç–∞ ($E$) –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –≤–ª–∞–≥–æ—É–¥–µ—Ä–∂–∞–Ω–∏–µ.")
    st.markdown("---")

    # 2. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–æ–¥—ã (Aw) (”®–∑–≥–µ—Ä—ñ—Å—Å—ñ–∑)
    st.header("2. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–æ–¥—ã ($A_w$)")
    st.latex(r"A_w = 0.95 - 0.003 \cdot C - 0.005 \cdot T_s")
    col_a1, col_a2 = st.columns(2)
    with col_a1:
        C = st.slider("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è —Å–æ–ª–∏ (C), %", min_value=2.0, max_value=6.0, value=4.0, step=0.2, key="a_C")
    with col_a2:
        Ts = st.slider("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–ª–µ–Ω–∏—è (Ts), —Å—É—Ç", min_value=1.0, max_value=7.0, value=3.0, step=0.5, key="a_Ts")
    Aw_predicted = 0.95 - 0.003 * C - 0.005 * Ts
    st.metric(label="–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–æ–¥—ã ($A_w$)", value=f"{Aw_predicted:.3f}",
              delta=f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∏–∑–∏—Ç—å –Ω–∞ {Aw_predicted - 0.90:.3f} –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è Aw ‚â§ 0.90" if Aw_predicted > 0.90 else "–í –ø—Ä–µ–¥–µ–ª–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –Ω–æ—Ä–º—ã")
    st.success("–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π $A_w$ (0.88-0.90) –∫—Ä–∏—Ç–∏—á–µ–Ω –¥–ª—è –º–∏–∫—Ä–æ–±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.")
    st.markdown("---")

    # 3. –ù–û–í–´–ô –ë–õ–û–ö: –¶–í–ï–¢–û–í–ê–Ø –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–¨
    st.header("3. –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å ($\Delta E$)")
    st.markdown("–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç–∫—Å—Ç—Ä–∞–∫—Ç–∞ –∏ —Å—É—à–∫–∏ (—á–µ–º –Ω–∏–∂–µ $\Delta E$, —Ç–µ–º –ª—É—á—à–µ).")
    st.latex(r"\Delta E = 1.80 - 0.20 \cdot E + 0.05 \cdot H")

    col_c1, col_c2 = st.columns(2)
    with col_c1:
        E_color = st.slider("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è —ç–∫—Å—Ç—Ä–∞–∫—Ç–∞ (E), %", min_value=0.0, max_value=5.0, value=3.0, step=0.5,
                            key="e_color")
    with col_c2:
        H_color = st.slider("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—É—à–∫–∏ (H), —á–∞—Å", min_value=2.0, max_value=10.0, value=5.0, step=0.5,
                            key="h_color")

    Delta_E_predicted = 1.80 - 0.20 * E_color + 0.05 * H_color

    st.metric(label="–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ ($\Delta E$)", value=f"{Delta_E_predicted:.2f}",
              delta="–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ $\Delta E < 2.0$")
    if Delta_E_predicted < 1.5:
        st.success("‚úÖ **–í—ã–≤–æ–¥:** –í—ã—Å–æ–∫–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å.")
    elif Delta_E_predicted < 2.5:
        st.warning("‚ö†Ô∏è **–í—ã–≤–æ–¥:** –¶–≤–µ—Ç –ø—Ä–∏–µ–º–ª–µ–º—ã–π, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–±–æ–ª—å—à–æ–µ –ø–æ—Ç–µ–º–Ω–µ–Ω–∏–µ.")
    else:
        st.error("‚ùå **–í—ã–≤–æ–¥:** –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞. –°–ª–∏—à–∫–æ–º –¥–æ–ª–≥–∞—è —Å—É—à–∫–∞ –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã.")

    st.markdown("---")

    # 4. –ù–û–í–´–ô –ë–õ–û–ö: –û–ö–ò–°–õ–ò–¢–ï–õ–¨–ù–ê–Ø –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–¨ (–ü–ï–†–ï–ö–ò–°–ù–û–ï –ß–ò–°–õ–û)
    st.header("4. –û–∫–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (–ü–µ—Ä–µ–∫–∏—Å–Ω–æ–µ —á–∏—Å–ª–æ - $\text{TBC}$)")
    st.markdown("–ü—Ä–æ–≥–Ω–æ–∑ —Å—Ç–µ–ø–µ–Ω–∏ –æ–∫–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ—Å–ª–µ 30 –¥–Ω–µ–π —Ö—Ä–∞–Ω–µ–Ω–∏—è.")
    st.latex(r"\text{TBC}_{30\text{–¥}} = 2.80 - 0.35 \cdot E - 0.10 \cdot S")

    col_t1, col_t2 = st.columns(2)
    with col_t1:
        E_tbc = st.slider("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è —ç–∫—Å—Ç—Ä–∞–∫—Ç–∞ (E), %", min_value=0.0, max_value=5.0, value=3.0, step=0.5,
                          key="e_tbc")
    with col_t2:
        S_tbc = st.slider("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è —Å–æ–ª–∏ (S), %", min_value=2.0, max_value=5.0, value=3.5, step=0.1, key="s_tbc")

    TBC_predicted = 2.80 - 0.35 * E_tbc - 0.10 * S_tbc

    st.metric(label="–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ–µ $\text{TBC}$ —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π, –º–≥/–∫–≥", value=f"{TBC_predicted:.2f}",
              delta="–ß–µ–º –Ω–∏–∂–µ, —Ç–µ–º –ª—É—á—à–µ (–¶–µ–ª—å $\text{TBC} < 1.5$)")

    if TBC_predicted < 1.0:
        st.success("‚úÖ **–í—ã–≤–æ–¥:** –û—Ç–ª–∏—á–Ω–∞—è –∞–Ω—Ç–∏–æ–∫–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å, —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–¥–ª–µ–Ω (60 –¥–Ω–µ–π).")
    elif TBC_predicted < 1.8:
        st.warning("‚ö†Ô∏è **–í—ã–≤–æ–¥:** –•–æ—Ä–æ—à–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ (30-45 –¥–Ω–µ–π) –æ–±–µ—Å–ø–µ—á–µ–Ω.")
    else:
        st.error(
            "‚ùå **–í—ã–≤–æ–¥:** –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –æ–∫–∏—Å–ª–µ–Ω–∏—è, —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –Ω–µ –±–æ–ª–µ–µ 30 –¥–Ω–µ–π. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å —ç–∫—Å—Ç—Ä–∞–∫—Ç.")

    st.markdown("---")

    # 5. –ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ—á–Ω–æ—Å—Ç—å (–ü–†–û–ß–ù–û–°–¢–¨) (”®–∑–≥–µ—Ä—ñ—Å—Å—ñ–∑)
    st.header("5. –ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ—á–Ω–æ—Å—Ç—å (—Ñ–æ—Ä–º–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è)")
    st.info("–ú–æ–¥–µ–ª—å –æ–ø–∏—Å—ã–≤–∞–µ—Ç **–ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∏ —É–ø—Ä—É–≥–æ—Å—Ç—å** –ø—Ä–æ–¥—É–∫—Ç–∞.")

    with st.expander("üõ†Ô∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä –ø—Ä–æ—á–Ω–æ—Å—Ç–∏", expanded=False):
        col_p_slider, col_v_slider = st.columns(2)
        with col_p_slider:
            P_input = st.slider("–î–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Å—Å–æ–≤–∞–Ω–∏—è ($P$), $–∫–≥/—Å–º^2$", min_value=0.5, max_value=2.0, value=1.0,
                                step=0.1, key="p_pressure")
        with col_v_slider:
            V_input = st.slider("–í—è–∑–∫–æ—Å—Ç—å —Ñ–∞—Ä—à–∞ ($V$), —É—Å–ª–æ–≤–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã", min_value=50, max_value=150, value=100,
                                step=10, key="v_viscosity")

        # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ app1.py
        Prochnost_score = calculate_stability(P_input, V_input / 100)

        st.metric(label="–ò–Ω–¥–µ–∫—Å –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏", value=f"{Prochnost_score:.2f}")

        if Prochnost_score >= 25:
            delta_text = "–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è/–í—ã—Å–æ–∫–∞—è –ø—Ä–æ—á–Ω–æ—Å—Ç—å. –•–æ—Ä–æ—à–µ–µ —Ñ–æ—Ä–º–æ–≤–∞–Ω–∏–µ."
            st.success(f"‚úÖ {delta_text}")
        elif Prochnost_score >= 15:
            delta_text = "–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ—á–Ω–æ—Å—Ç—å. –ü—Ä–∏–µ–º–ª–µ–º–æ, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è –∫ –¥–∞–≤–ª–µ–Ω–∏—é."
            st.warning(f"‚ö†Ô∏è {delta_text}")
        else:
            delta_text = "–ù–∏–∑–∫–∞—è –ø—Ä–æ—á–Ω–æ—Å—Ç—å. –†–∏—Å–∫ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞."
            st.error(f"‚ùå {delta_text}")

    st.markdown("</div>", unsafe_allow_html=True)


# =================================================================
# PAGE: –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ pH (–ò–ó app.py)
# =================================================================
elif page == L["menu"][3]:
    st.title("üå°Ô∏è –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ pH –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ—Å–æ–ª–∞")
    st.markdown("### –ü—Ä–æ–≥–Ω–æ–∑ –∫–∏–Ω–µ—Ç–∏–∫–∏ –∫–∏—Å–ª–æ—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    with st.expander("‚ÑπÔ∏è –ù–∞—É—á–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ pH-–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è", expanded=True):
        st.write("""
            **–ë–∏–æ—Ö–∏–º–∏—á–µ—Å–∫–∏–π —Å–º—ã—Å–ª:** –°–Ω–∏–∂–µ–Ω–∏–µ pH (–ø–æ–≤—ã—à–µ–Ω–∏–µ –∫–∏—Å–ª–æ—Ç–Ω–æ—Å—Ç–∏) –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑—Ä–µ–≤–∞–Ω–∏—è –º—è—Å–∞ ‚Äî —ç—Ç–æ –∫–ª—é—á–µ–≤–æ–π —Ñ–∞–∫—Ç–æ—Ä, –≤–ª–∏—è—é—â–∏–π –Ω–∞ –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–π –º–∏–∫—Ä–æ—Ñ–ª–æ—Ä—ã –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç—É—Ä—ã –∏ –≤–∫—É—Å–∞. –û–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∑–∞ —Å—á–µ—Ç —Ñ–µ—Ä–º–µ–Ω—Ç–∞—Ü–∏–∏ —É–≥–ª–µ–≤–æ–¥–æ–≤ (–≥–ª–∏–∫–æ–≥–µ–Ω–∞) –¥–æ –º–æ–ª–æ—á–Ω–æ–π –∫–∏—Å–ª–æ—Ç—ã —Å—Ç–∞—Ä—Ç–æ–≤—ã–º–∏ –∫—É–ª—å—Ç—É—Ä–∞–º–∏ –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ñ–µ—Ä–º–µ–Ω—Ç–∞–º–∏ –º—è—Å–∞.

            **–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ:**
            1.  **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** –ë—ã—Å—Ç—Ä–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ pH –Ω–∏–∂–µ 5.6-5.8 –∏–Ω–≥–∏–±–∏—Ä—É–µ—Ç —Ä–æ—Å—Ç –ø–∞—Ç–æ–≥–µ–Ω–Ω—ã—Ö –±–∞–∫—Ç–µ—Ä–∏–π (E.coli, Salmonella).
            2.  **–ö–∞—á–µ—Å—Ç–≤–æ:** –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∫–æ–Ω–µ—á–Ω—ã–π pH (4.8-5.4) —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –≤–ª–∞–≥–æ—É–¥–µ—Ä–∂–∞–Ω–∏—é, –Ω–µ–∂–Ω–æ—Å—Ç–∏ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é —Ü–≤–µ—Ç–∞.
            3.  **–ö–æ–Ω—Ç—Ä–æ–ª—å:** –ú–æ–¥–µ–ª—å –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å, –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç –ª–∏ –ø—Ä–æ–¥—É–∫—Ç —Ü–µ–ª–µ–≤–æ–≥–æ pH –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏ —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, —Å–æ–ª—å, —Å—Ç–∞—Ä—Ç–µ—Ä—ã).
        """)
    st.markdown("---")
    st.subheader("–§–æ—Ä–º—É–ª–∞ –∫–∏–Ω–µ—Ç–∏–∫–∏ pH (–ü–æ–¥–º–æ–¥–µ–ª—å —Å–æ–ª–µ–Ω–∏—è)")
    st.latex(r"pH(t) = pH_0 - (pH_0 - pH_{\infty}) \cdot (1 - e^{-k \cdot t})")
    st.markdown("–ì–¥–µ: pH_0 - –Ω–∞—á–∞–ª—å–Ω–æ–µ, pH_inf - –∫–æ–Ω–µ—á–Ω–æ–µ, k - –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏.")
    st.warning("–ó–Ω–∞—á–µ–Ω–∏–µ k –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã/—Å–æ–ª–µ–Ω–∏—è.")
    st.markdown("---")


    # –ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è/–ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ —É–ª—É—á—à–∞–µ–º
    def ph_model_func(t, pH0=6.6, pH_inf=4.6, k=0.03):
        # logistic-like approach: pH decreases from pH0 to pH_inf with rate k
        t = np.array(t, dtype=float)
        ph = pH_inf + (pH0 - pH_inf) * np.exp(-k * t)
        # ensure numeric stability and realistic bounds
        ph = np.clip(ph, 0.0, 14.0)
        return ph


    st.subheader("‚öôÔ∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –∏ –∞–Ω–∞–ª–∏–∑")
    # interactive params
    col_a, col_b, col_c = st.columns(3)
    with col_a:
        pH0 = st.number_input("pH –Ω–∞—á–∞–ª—å–Ω–æ–µ (pH0)", value=6.6, format="%.2f")
    with col_b:
        pH_inf = st.number_input("pH –∫–æ–Ω–µ—á–Ω–æ–µ (pH_inf)", value=4.6, format="%.2f")
    with col_c:
        k = st.number_input("–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ (k)", value=0.03, format="%.4f")

    t_input = st.slider("–í—Ä–µ–º—è –ø—Ä–æ–≥–Ω–æ–∑–∞ (t), —á–∞—Å", min_value=1, max_value=240, value=48, step=1)
    pH_forecast = float(ph_model_func(t_input, pH0=pH0, pH_inf=pH_inf, k=k))
    st.metric(label="–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π pH –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è", value=f"{pH_forecast:.2f}",
              delta=f"–†–∞–∑–Ω–∏—Ü–∞ –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ pH 5.6: {(pH_forecast - 5.6):.2f}", delta_color="inverse")
    if pH_forecast < 4.8:
        st.error("**–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫–∏—Å–ª–µ–Ω–∏–µ.** –ü—Ä–æ–¥—É–∫—Ç —Å–ª–∏—à–∫–æ–º –∫–∏—Å–ª—ã–π.")
    elif 4.8 <= pH_forecast <= 5.6:
        st.success("**–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω.**")
    elif pH_forecast > 5.6:
        st.warning("**–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∑–∞–∫–∏—Å–ª–µ–Ω–∏–µ.**")

    st.markdown("---")
    st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–∏–Ω–µ—Ç–∏–∫–∏ pH (–∏—Å–ø–æ–ª—å–∑—É–µ–º plotly, –∫–ª–∏–ø–∏—Ä—É–µ–º –≤–Ω–∏–∑)")
    times = np.linspace(0, 240, 300)
    pH_values = ph_model_func(times, pH0=pH0, pH_inf=pH_inf, k=k)
    # plotly interactive
    fig = px.line(x=times, y=pH_values, labels={'x': '–í—Ä–µ–º—è (—á)', 'y': 'pH'}, title='–ö–∏–Ω–µ—Ç–∏–∫–∞ pH –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ—Å–æ–ª–∞')
    # highlight target range
    fig.add_hrect(y0=4.8, y1=5.6, fillcolor="green", opacity=0.08, layer="below", line_width=0)
    fig.add_vline(x=t_input, line_dash="dash", annotation_text=f"{t_input} —á", annotation_position="top right")
    fig.update_yaxes(range=[0, 8])  # realistic pH focus
    st.plotly_chart(fig, use_container_width=True)


# =================================================================
# PAGE: –ê–Ω–∞–ª–∏–∑ —Å —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ–º –æ–±–ª–µ–ø–∏—Ö–∏ (–ò–ó app.py)
# =================================================================
elif page == L["menu"][4]:
    st.title("üî¨ –í–ª–∏—è–Ω–∏–µ —ç–∫—Å—Ç—Ä–∞–∫—Ç–∞ –æ–±–ª–µ–ø–∏—Ö–∏ –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –∂–∞—è –∏ —Ñ–æ—Ä–º–æ–≤–∞–Ω–Ω–æ–≥–æ –º—è—Å–∞")
    st.write("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (–Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –û—Ç—á–µ—Ç–∞).")
    st.markdown("---")
    st.subheader("–¢–∞–±–ª–∏—Ü–∞ 1. –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–æ–ø—á—ë–Ω–æ–π –∂–∞—è (–∫–æ–Ω—Ç—Ä–æ–ª—å –∏ 5% —ç–∫—Å—Ç—Ä–∞–∫—Ç–∞)")
    table1_data = {
        "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": ["–ú–∞—Å—Å–æ–≤–∞—è –¥–æ–ª—è –≤–ª–∞–≥–∏, %", "–ë–µ–ª–æ–∫, %", "–ñ–∏—Ä, %",
                       "–í–ª–∞–≥–æ—É–¥–µ—Ä–∂. —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å (–í–£–°), %", "–¢–ë–ß, –º–≥/–∫–≥"],
        "–ö–æ–Ω—Ç—Ä–æ–ª—å (0%)": [65.2, 21.2, 31.06, 60.2, 0.69],
        "–ñ–∞—è + 5% —ç–∫—Å—Ç—Ä–∞–∫—Ç–∞": [67.8, 25.44, 33.4, 67.4, 0.96]
    }
    df_table1 = pd.DataFrame(table1_data)
    st.dataframe(df_table1)
    st.subheader("–¢–∞–±–ª–∏—Ü–∞ 2. –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ñ–æ—Ä–º–æ–≤–∞–Ω–Ω–æ–≥–æ –º—è—Å–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ (–∫–æ–Ω—Ç—Ä–æ–ª—å –∏ 3% —ç–∫—Å—Ç—Ä–∞–∫—Ç–∞)")
    table2_data = {...} if False else {
        "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": ["–ú–∞—Å—Å–æ–≤–∞—è –¥–æ–ª—è –≤–ª–∞–≥–∏, %", "–ë–µ–ª–æ–∫, %", "–ñ–∏—Ä, %", "NaCl, %", "–ó–æ–ª–∞, %"],
        "–ö–æ–Ω—Ç—Ä–æ–ª—å (0%)": [68.96, 13.60, 11.03, 1.77, 2.96],
        "–§–æ—Ä–º–æ–≤–∞–Ω–Ω–æ–µ –º—è—Å–æ + 3% —ç–∫—Å—Ç—Ä–∞–∫—Ç–∞": [70.08, 13.88, 8.51, 1.27, 2.22]
    }
    df_table2 = pd.DataFrame(table2_data)
    st.dataframe(df_table2)
    st.markdown("---")
    col1, col2 = st.columns(2)
    x_ticks = np.arange(0, 15.1, 2.5)
    with col1:
        st.subheader("–†–∏—Å. 1. –í–ª–∏—è–Ω–∏–µ —ç–∫—Å—Ç—Ä–∞–∫—Ç–∞ –Ω–∞ –≤–ª–∞–≥–æ—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∂–∞—è")
        x = np.array([0, 3, 5, 7, 9, 15])
        vlaga = np.array([65.2, 66.8, 68.9, 68.6, 67.8, 65.4])
        fig1 = px.line(x=x, y=vlaga, markers=True, title="–í–ª–∏—è–Ω–∏–µ —ç–∫—Å—Ç—Ä–∞–∫—Ç–∞ –æ–±–ª–µ–ø–∏—Ö–∏ –Ω–∞ –≤–ª–∞–≥–æ—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∂–∞—è")
        fig1.update_xaxes(tickvals=x_ticks)
        st.plotly_chart(fig1, use_container_width=True)
        st.subheader("–†–∏—Å. 3. –í–£–°, –í–°–° –∏ –ñ–£–° –∫–æ–ø—á—ë–Ω–æ–π –∂–∞—è")
        VUS = np.array([60.2, 64.3, 67.4, 71.2, 73.5, 78.9])
        VSS = np.array([61.0, 65.5, 70.1, 73.8, 75.2, 77.4])
        ZhUS = np.array([60.0, 63.1, 66.8, 70.0, 72.5, 74.8])
        fig3 = px.line(x=x, y=VUS, markers=True, title="–í–£–°, –í–°–° –∏ –ñ–£–° –∫–æ–ø—á—ë–Ω–æ–π –∂–∞—è")
        fig3.add_scatter(x=x, y=VUS, mode='lines+markers', name='–í–£–°, %')  # –î–æ–±–∞–≤–∏–ª VUS
        fig3.add_scatter(x=x, y=VSS, mode='lines+markers', name='–í–°–°, %')
        fig3.add_scatter(x=x, y=ZhUS, mode='lines+markers', name='–ñ–£–°, %')
        fig3.update_xaxes(tickvals=x_ticks)
        st.plotly_chart(fig3, use_container_width=True)
        st.subheader("–†–∏—Å. 5. –û–∫–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ñ–æ—Ä–º–æ–≤–∞–Ω–Ω–æ–≥–æ –º—è—Å–∞")
        days2 = np.array([5, 10, 15])
        tbch_c2 = np.array([0.203, 0.284, 0.312])
        tbch_e2 = np.array([0.254, 0.366, 0.428])
        perox_c2 = np.array([13.27, 14.30, 15.21])
        perox_e2 = np.array([9.90, 10.80, 11.60])
        fig5 = px.line(title="–û–∫–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ñ–æ—Ä–º–æ–≤–∞–Ω–Ω–æ–≥–æ –º—è—Å–∞")
        fig5.add_scatter(x=days2, y=tbch_c2, mode='lines+markers', name='–¢–ë–ß –∫–æ–Ω—Ç—Ä–æ–ª—å')
        fig5.add_scatter(x=days2, y=tbch_e2, mode='lines+markers', name='–¢–ë–ß 3%')
        fig5.add_scatter(x=days2, y=perox_c2, mode='lines+markers', name='–ü–µ—Ä–æ–∫—Å –∫–æ–Ω—Ç—Ä–æ–ª—å')
        fig5.add_scatter(x=days2, y=perox_e2, mode='lines+markers', name='–ü–µ—Ä–æ–∫—Å 3%')
        st.plotly_chart(fig5, use_container_width=True)
    with col2:
        st.subheader("–†–∏—Å. 2. –ë–µ–ª–æ–∫ –∏ –∂–∏—Ä –≤ –∂–∞—è")
        belok = np.array([21.2, 23.4, 25.4, 27.5, 29.8, 34.9])
        zhir = np.array([31.06, 32.4, 33.4, 37.1, 41.2, 45.0])
        fig2 = px.line(title="–ë–µ–ª–æ–∫ –∏ –∂–∏—Ä –≤ –∂–∞—è")
        fig2.add_scatter(x=x, y=belok, mode='lines+markers', name='–ë–µ–ª–æ–∫, %')
        fig2.add_scatter(x=x, y=zhir, mode='lines+markers', name='–ñ–∏—Ä, %')
        fig2.update_xaxes(tickvals=x_ticks)
        st.plotly_chart(fig2, use_container_width=True)
        st.subheader("–†–∏—Å. 4. –û–∫–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∂–∞—è")
        days = np.array([5, 10, 15])
        tbch_c = np.array([0.197, 0.376, 0.416])
        tbch_e = np.array([0.194, 0.361, 0.419])
        perox_c = np.array([17.96, 19.12, 20.25])
        perox_e = np.array([13.01, 14.40, 15.13])
        fig4 = px.line(title="–û–∫–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∂–∞—è")
        fig4.add_scatter(x=days, y=tbch_c, mode='lines+markers', name='–¢–ë–ß –∫–æ–Ω—Ç—Ä–æ–ª—å')
        fig4.add_scatter(x=days, y=tbch_e, mode='lines+markers', name='–¢–ë–ß 3%')
        fig4.add_scatter(x=days, y=perox_c, mode='lines+markers', name='–ü–µ—Ä–æ–∫—Å –∫–æ–Ω—Ç—Ä–æ–ª—å')
        fig4.add_scatter(x=days, y=perox_e, mode='lines+markers', name='–ü–µ—Ä–æ–∫—Å 3%')
        st.plotly_chart(fig4, use_container_width=True)

# =================================================================
# PAGE: –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–ò–°–ü–†–ê–í–õ–ï–ù–û)
# =================================================================
elif page == L["menu"][5]:
    st.title("üóÇÔ∏è –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    st.write("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")

    # –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º 'df_ph_raw' –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    df_to_use_for_ph = df_ph_raw

    if all_meat_data:
        available_tables = list(all_meat_data.keys())

        # –ò–°–ü–†–ê–í–õ–ï–ù–û –ó–î–ï–°–¨
        if df_to_use_for_ph is not None:
            available_tables.append('opyty.xlsx')

        choice = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:", available_tables)
        st.markdown(f"**–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑: `{choice}`**")

        if choice == 'opyty.xlsx':
            # –ò –ò–°–ü–†–ê–í–õ–ï–ù–û –ó–î–ï–°–¨
            if df_to_use_for_ph is not None:
                df_to_show = df_to_use_for_ph.copy()
            else:
                df_to_show = pd.DataFrame()
        else:
            df_to_show = all_meat_data.get(choice, pd.DataFrame()).copy()

        if 'Accuracy' in df_to_show.columns:
            df_to_show['Accuracy'] = pd.to_numeric(df_to_show['Accuracy'], errors='coerce')
        if not df_to_show.empty:
            st.dataframe(df_to_show)
        else:
            st.warning(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è '{choice}' –Ω–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã.")
    else:
        st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")

# =================================================================
# PAGE: –ò—Å—Ç–æ—Ä–∏—è / DB (–¢–∞—Ä–∏—Ö / DB) (–ò–ó app1.py)
# =================================================================
elif page == L["menu"][6]:
    st.markdown("<div class='fade-in'>", unsafe_allow_html=True)
    st.title("üíæ –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏–π –∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
    st.markdown("### –í—Å–µ –∑–∞–ø–∏—Å–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π pH –∏ —Å–∫–æ—Ä–∏–Ω–≥–∞")

    df_db = fetch_measurements()

    if df_db.empty:
        st.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π –ø—É—Å—Ç–∞.")
    else:
        st.subheader(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(df_db)} –∏–∑–º–µ—Ä–µ–Ω–∏–π")
        st.dataframe(df_db, use_container_width=True)

        # –ì—Ä–∞—Ñ–∏–∫ pH –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        fig_db = px.line(df_db.sort_values('created_at'), x='created_at', y='ph', color='sample_name',
                         title='–î–∏–Ω–∞–º–∏–∫–∞ pH –∏–∑–º–µ—Ä–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏', template='plotly_dark')
        st.plotly_chart(fig_db, use_container_width=True)

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ
        st.markdown("---")
        col_dl, col_del = st.columns(2)
        with col_dl:
            st.markdown(df_to_download_link(df_db, "measurements_export.csv"), unsafe_allow_html=True)
        with col_del:
            if st.button("‚ùå –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", key="db_reset"):
                if st.session_state.get('confirm_reset', False):
                    delete_all_measurements()
                    st.session_state['confirm_reset'] = False
                    st.success("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞.")
                    st.experimental_rerun()
                else:
                    st.session_state['confirm_reset'] = True
                    st.warning(L["db_reset_confirm"])
                    st.button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—á–∏—Å—Ç–∫—É", key="confirm_btn")

    st.markdown("</div>", unsafe_allow_html=True)

# =================================================================
# PAGE: ML: Train / Predict (–ò–ó app.py)
# =================================================================
elif page == L["menu"][7]:
    st.title("üß† ML: –û–±—É—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ pH")
    st.markdown(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV/Excel —Å –∫–æ–ª–æ–Ω–∫–æ–π 'pH' –∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.")
    tab1, tab2 = st.tabs(["Train", "Predict"])

    with tab1:
        st.subheader("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")
        up = st.file_uploader("CSV/Excel –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (–∫–æ–ª–æ–Ω–∫–∞ pH)", type=["csv", "xlsx", "xls"], key="train_up")
        if up:
            try:
                if up.name.lower().endswith(".csv"):
                    df_train = pd.read_csv(up)
                else:
                    df_train = pd.read_excel(up)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
                df_train = pd.DataFrame()
            if df_train.empty:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            else:
                st.write("–ü—Ä–µ–≤—å—é:")
                st.dataframe(df_train.head(10))
                cols = df_train.columns.tolist()
                if 'pH' in cols:
                    target = 'pH'
                else:
                    target = st.selectbox("–¶–µ–ª–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ (pH) –≤—ã–±–µ—Ä–∏—Ç–µ:", options=cols)
                features = st.multiselect("–ü—Ä–∏–∑–Ω–∞–∫–∏ (–µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –±—É–¥—É—Ç –≤–∑—è—Ç—ã –≤—Å–µ —á–∏—Å–ª–æ–≤—ã–µ –∫—Ä–æ–º–µ —Ü–µ–ª–∏)", options=cols)
                if st.button(L[lang_choice]["train_button"]):
                    try:
                        metrics = ph_model.train(df_train, target=target, feature_cols=features if features else None)
                        st.success("–û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ")
                        st.json(metrics)
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")

    with tab2:
        st.subheader("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ")
        up2 = st.file_uploader("CSV –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (—Ç–µ –∂–µ –ø—Ä–∏–∑–Ω–∞–∫–∏)", type=["csv"], key="pred_up")
        if up2:
            try:
                df_pred = pd.read_csv(up2)
            except Exception:
                try:
                    df_pred = pd.read_excel(up2)
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
                    df_pred = pd.DataFrame()
            if df_pred.empty:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            else:
                st.dataframe(df_pred.head(10))
                num_cols = df_pred.select_dtypes(include=[np.number]).columns.tolist()
                st.write("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:", num_cols)
                if st.button(L[lang_choice]["predict_button"]):
                    preds = ph_model.predict(df_pred, feature_cols=num_cols)
                    df_pred['predicted_pH'] = np.round(preds, 3)
                    # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è compute_score_from_ph (6.5) –∏–∑ app.py
                    df_pred['score'] = df_pred['predicted_pH'].apply(compute_score_from_ph)
                    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
                    st.dataframe(df_pred.head(50))
                    st.markdown(df_to_download_link(df_pred, filename="predictions.csv"), unsafe_allow_html=True)
                    # –æ–ø—Ü–∏—è: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∞ sample_name
                    if 'sample_name' in df_pred.columns:
                        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ –±–∞–∑—É (sample_name -> sample)"):
                            saved = 0
                            for _, r in df_pred.iterrows():
                                insert_measurement(str(r.get('sample_name', 'sample')),
                                                   float(r.get('predicted_pH', np.nan)),
                                                   compute_score_from_ph(float(r.get('predicted_pH', np.nan))),
                                                   notes="predicted")
                                saved += 1
                            st.success(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved} –∑–∞–ø–∏—Å–µ–π –≤ –ë–î")

# =====================================================================
# PAGE: –í–≤–æ–¥ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ò–ó app.py)
# =====================================================================
elif page == L["menu"][8]:
    st.title("‚ûï –í–≤–æ–¥ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏")
    st.markdown(f"### –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö ({MEAT_XLSX}, –ª–∏—Å—Ç {SHEET_NAME})")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ (–∏—Å–ø–æ–ª—å–∑—É—è safe_read_excel, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Ä–∞–Ω–µ–µ)
    df_meat = safe_read_excel(MEAT_XLSX, SHEET_NAME)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–ª–æ–Ω–∫–∏ BatchID
    if "BatchID" not in df_meat.columns:
        st.error("‚ùå –í –ª–∏—Å—Ç–µ T6 –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ 'BatchID'. –ü—Ä–æ–≤–µ—Ä—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã.")
        st.stop()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π BatchID (–õ–æ–≥–∏–∫–∞ –∏–∑ app.py)
    if len(df_meat) > 0 and df_meat["BatchID"].astype(str).str.match(r"^M\d+$").any():
        last_id_str = df_meat[df_meat["BatchID"].astype(str).str.match(r"^M\d+$")]["BatchID"].dropna().astype(str).iloc[
            -1]
        try:
            last_num = int(last_id_str[1:])
            next_id = f"M{last_num + 1}"
        except:
            next_id = "M1"
    else:
        next_id = "M1"

    with st.form(key='batch_entry_form'):
        st.subheader("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞")

        st.text_input("Batch ID (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)", value=next_id, disabled=True)

        col1, col2 = st.columns(2)
        with col1:
            mass_kg = st.number_input("–ú–∞—Å—Å–∞ –ø–∞—Ä—Ç–∏–∏ (–∫–≥)", min_value=1.0, value=100.0, step=1.0)
            T_initial_C = st.number_input("–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)", min_value=-10.0, value=4.0, step=0.1)
            Salt_pct = st.number_input("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–ª–∏ (%)", min_value=0.0, value=5.0, step=0.1)
        with col2:
            Moisture_pct = st.number_input("–í–ª–∞–∂–Ω–æ—Å—Ç—å (%)", min_value=0.0, value=75.0, step=0.1)
            StarterCFU = st.number_input("–°—Ç–∞—Ä—Ç–µ—Ä–Ω–∞—è –∫—É–ª—å—Ç—É—Ä–∞ (–ö–û–ï/–≥)", min_value=0, value=1000000, step=10000)
            Extract_pct = st.number_input("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è —ç–∫—Å—Ç—Ä–∞–∫—Ç–∞ (%)", min_value=0.0, value=3.0, step=0.1)

        submitted = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")

        if submitted:
            new_row = {
                "BatchID": next_id,
                "mass_kg": mass_kg,
                "T_initial_C": T_initial_C,
                "Salt_pct": Salt_pct,
                "Moisture_pct": Moisture_pct,
                "StarterCFU": StarterCFU,
                "Extract_pct": Extract_pct
            }
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è append_row_excel, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Ä–∞–Ω–µ–µ
                append_row_excel(MEAT_XLSX, SHEET_NAME, new_row)
                st.success(f"‚úÖ –ù–æ–≤–∞—è –ø–∞—Ä—Ç–∏—è '{next_id}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ª–∏—Å—Ç '{SHEET_NAME}'!")
                st.cache_data.clear()  # –û—á–∏—â–∞–µ–º –∫—ç—à
                load_all_data.clear()  # –û—á–∏—â–∞–µ–º –∫—ç—à
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª: {e}")

    st.markdown("---")
    st.subheader("üìä –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ")
    st.dataframe(safe_read_excel(MEAT_XLSX, SHEET_NAME), use_container_width=True)

# ---------------------------
# Footer
# ---------------------------
st.sidebar.markdown("---")
st.sidebar.caption(L["version_note"])